#!/usr/bin/env python3
"""
ÎèôÏ†Å ÏÑ†ÌÉùÏßÄ ÏÉùÏÑ± ÏãúÏä§ÌÖú ÌÖåÏä§Ìä∏

ÏÉàÎ°ú Íµ¨ÌòÑÎêú ÎèôÏ†Å ÏÑ†ÌÉùÏßÄ ÏÉùÏÑ±Ïù¥ ÏÉÅÌô©Ïóê ÎßûÍ≤å ÏûëÎèôÌïòÎäîÏßÄ ÌôïÏù∏
"""

import sys
import os
import asyncio

# Add src directory to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

async def test_dynamic_choice_system():
    """ÎèôÏ†Å ÏÑ†ÌÉùÏßÄ ÏÉùÏÑ± ÏãúÏä§ÌÖú ÌÖåÏä§Ìä∏"""
    
    print("=== ÎèôÏ†Å ÏÑ†ÌÉùÏßÄ ÏÉùÏÑ± ÏãúÏä§ÌÖú ÌÖåÏä§Ìä∏ ===\n")
    
    try:
        from src.core.gameplay_controller import GameplayController, ChoiceContext, TensionLevel
        from src.core.game_manager import GameManager
        from src.utils.config import Config
        
        # Mock ÌôòÍ≤Ω ÏÑ§Ï†ï
        config = Config()
        config.set('ai.use_mock_client', True)
        
        game_manager = GameManager(config)
        await game_manager.initialize_systems()
        
        # GameplayController Ï¥àÍ∏∞Ìôî
        controller = GameplayController(game_manager)
        print("‚úÖ GameplayController Ï¥àÍ∏∞Ìôî ÏôÑÎ£å")
        
        # Îã§ÏñëÌïú ÏÉÅÌô©Î≥Ñ ÌÖåÏä§Ìä∏ ÏºÄÏù¥Ïä§
        test_scenarios = [
            {
                'name': 'ÏûÖÍµ¨ ÏÉÅÌô©',
                'scene_id': 'scene_001_entrance',
                'character_state': {
                    'sanity_current': 80,
                    'hit_points_current': 10,
                    'hit_points_maximum': 10
                },
                'tension': TensionLevel.UNEASY
            },
            {
                'name': 'Í±∞Ïã§ ÏÉÅÌô©',
                'scene_id': 'scene_002_living_room',
                'character_state': {
                    'sanity_current': 60,
                    'hit_points_current': 8,
                    'hit_points_maximum': 10
                },
                'tension': TensionLevel.TENSE
            },
            {
                'name': 'ÏßÄÌïòÏã§ ÏÉÅÌô© - ÏúÑÌóò',
                'scene_id': 'scene_005_basement',
                'character_state': {
                    'sanity_current': 30,
                    'hit_points_current': 5,
                    'hit_points_maximum': 10
                },
                'tension': TensionLevel.TERRIFYING
            },
            {
                'name': 'ÏÑúÏû¨ ÏÉÅÌô©',
                'scene_id': 'scene_004_study',
                'character_state': {
                    'sanity_current': 70,
                    'hit_points_current': 9,
                    'hit_points_maximum': 10
                },
                'tension': TensionLevel.CALM
            }
        ]
        
        print("üß™ ÏÉÅÌô©Î≥Ñ ÏÑ†ÌÉùÏßÄ ÏÉùÏÑ± ÌÖåÏä§Ìä∏:\n")
        
        for i, scenario in enumerate(test_scenarios, 1):
            print(f"ÌÖåÏä§Ìä∏ {i}: {scenario['name']}")
            print(f"   Ïî¨ ID: {scenario['scene_id']}")
            print(f"   Ï†ïÏã†Î†•: {scenario['character_state']['sanity_current']}")
            print(f"   Ï≤¥Î†•: {scenario['character_state']['hit_points_current']}")
            print(f"   Í∏¥Ïû•ÎèÑ: {scenario['tension'].value}")
            
            try:
                # ÏÑ†ÌÉùÏßÄ ÏÉùÏÑ± ÌÖåÏä§Ìä∏
                choices = await controller.get_current_choices(scenario['character_state'])
                
                print(f"   ÏÉùÏÑ±Îêú ÏÑ†ÌÉùÏßÄ Ïàò: {len(choices)}")
                
                # ÏÑ†ÌÉùÏßÄ ÎÇ¥Ïö© Ï∂úÎ†•
                for j, choice in enumerate(choices, 1):
                    location = choice.metadata.get('location', 'unknown')
                    choice_type = choice.metadata.get('type', 'unknown')
                    print(f"      {j}. [{location}/{choice_type}] {choice.text}")
                
                # AI ÏãúÏä§ÌÖú ÏÉÅÌÉú ÌôïÏù∏
                ai_status = controller.get_ai_system_status()
                user_message = controller.get_user_feedback_message()
                print(f"   AI ÏÉÅÌÉú: {ai_status['status']}")
                print(f"   ÏÇ¨Ïö©Ïûê Î©îÏãúÏßÄ: {user_message}")
                
                # ÏÑ†ÌÉùÏßÄ ÌíàÏßà Í≤ÄÏ¶ù
                unique_texts = set(choice.text for choice in choices)
                if len(unique_texts) == len(choices):
                    print("   ‚úÖ Î™®Îì† ÏÑ†ÌÉùÏßÄÍ∞Ä Í≥†Ïú†Ìï®")
                else:
                    print("   ‚ö†Ô∏è  Ï§ëÎ≥µÎêú ÏÑ†ÌÉùÏßÄ Ï°¥Ïû¨")
                
                # ÏÉÅÌô©Î≥Ñ Ï†ÅÏ†àÏÑ± Í≤ÄÏ¶ù
                location_match = any(scenario['scene_id'].split('_')[-1] in choice.metadata.get('location', '') 
                                   for choice in choices)
                if location_match:
                    print("   ‚úÖ ÏúÑÏπòÏóê ÎßûÎäî ÏÑ†ÌÉùÏßÄ Ìè¨Ìï®")
                else:
                    print("   ‚ö†Ô∏è  ÏúÑÏπòÎ≥Ñ ÏÑ†ÌÉùÏßÄ ÎØ∏Ìè¨Ìï®")
                
                print()
                
            except Exception as e:
                print(f"   ‚ùå ÏÑ†ÌÉùÏßÄ ÏÉùÏÑ± Ïã§Ìå®: {e}")
                import traceback
                traceback.print_exc()
                print()
        
        # Ïó∞ÏÜç Ìò∏Ï∂ú ÌÖåÏä§Ìä∏ (ÏÑ†ÌÉùÏßÄÍ∞Ä Îß§Î≤à Îã¨ÎùºÏßÄÎäîÏßÄ ÌôïÏù∏)
        print("üîÑ Ïó∞ÏÜç Ìò∏Ï∂ú ÌÖåÏä§Ìä∏ (ÏÑ†ÌÉùÏßÄ Î≥ÄÌôî ÌôïÏù∏):")
        
        test_character_state = {
            'sanity_current': 50,
            'hit_points_current': 7,
            'hit_points_maximum': 10
        }
        
        previous_choices = set()
        for turn in range(3):
            print(f"\n   ÌÑ¥ {turn + 1}:")
            choices = await controller.get_current_choices(test_character_state)
            
            current_choice_texts = {choice.text for choice in choices}
            print(f"   ÏÑ†ÌÉùÏßÄ: {list(current_choice_texts)}")
            
            if turn > 0:
                # Ïù¥Ï†Ñ ÌÑ¥Í≥º ÎπÑÍµê
                overlap = previous_choices.intersection(current_choice_texts)
                overlap_ratio = len(overlap) / len(previous_choices) if previous_choices else 0
                
                if overlap_ratio < 0.8:  # 80% ÎØ∏Îßå Ï§ëÎ≥µÏù¥Î©¥ Ï∂©Î∂ÑÌûà Î≥ÄÌôî
                    print(f"   ‚úÖ ÏÑ†ÌÉùÏßÄÍ∞Ä Ï∂©Î∂ÑÌûà Î≥ÄÌôîÌï® (Ï§ëÎ≥µÎ•†: {overlap_ratio:.1%})")
                else:
                    print(f"   ‚ö†Ô∏è  ÏÑ†ÌÉùÏßÄ Î≥ÄÌôî Î∂ÄÏ°± (Ï§ëÎ≥µÎ•†: {overlap_ratio:.1%})")
            
            previous_choices = current_choice_texts
        
        # ÌÜµÍ≥Ñ Ï†ïÎ≥¥ Ï∂úÎ†•
        print(f"\nüìä ÏãúÏä§ÌÖú ÌÜµÍ≥Ñ:")
        stats = controller.get_ai_system_status()
        print(f"   Ï¥ù ÏöîÏ≤≠ Ïàò: {stats['choice_generation_stats']['total_requests']}")
        print(f"   AI ÏÑ±Í≥µ: {stats['choice_generation_stats']['ai_successes']}")
        print(f"   AI Ïã§Ìå®: {stats['choice_generation_stats']['ai_failures']}")
        print(f"   ÎåÄÏ≤¥ ÏãúÏä§ÌÖú ÏÇ¨Ïö©: {stats['choice_generation_stats']['fallback_uses']}")
        print(f"   ÏÑ±Í≥µÎ•†: {stats['success_rate']:.1f}%")
        
        await game_manager.shutdown()
        return True
        
    except Exception as e:
        print(f"‚ùå ÌÖåÏä§Ìä∏ Ïã§Ìå®: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """Î©îÏù∏ Ìï®Ïàò"""
    
    print("ÌÅ¨Ìà¥Î£® TRPG ÎèôÏ†Å ÏÑ†ÌÉùÏßÄ ÏÉùÏÑ± ÌÖåÏä§Ìä∏Î•º ÏãúÏûëÌï©ÎãàÎã§...\n")
    
    success = await test_dynamic_choice_system()
    
    if success:
        print("\nüéä ÎèôÏ†Å ÏÑ†ÌÉùÏßÄ ÏÉùÏÑ± ÌÖåÏä§Ìä∏ ÏÑ±Í≥µ!")
        print("\n‚ú® Íµ¨ÌòÑÎêú Í∏∞Îä•Îì§:")
        print("  - ‚úÖ ÏúÑÏπòÎ≥Ñ ÎßûÏ∂§ ÏÑ†ÌÉùÏßÄ ÏÉùÏÑ±")
        print("  - ‚úÖ Ï∫êÎ¶≠ÌÑ∞ ÏÉÅÌÉú Î∞òÏòÅ ÏÑ†ÌÉùÏßÄ")
        print("  - ‚úÖ Í∏¥Ïû•ÎèÑÎ≥Ñ Ï†ÅÏùëÏ†Å ÏÑ†ÌÉùÏßÄ")
        print("  - ‚úÖ AI ÏóêÏù¥Ï†ÑÌä∏ ÏÉÅÌÉú Î™®ÎãàÌÑ∞ÎßÅ")
        print("  - ‚úÖ Ìñ•ÏÉÅÎêú fallback ÏãúÏä§ÌÖú")
        print("  - ‚úÖ ÏÑ†ÌÉùÏßÄ Ï§ëÎ≥µ Ï†úÍ±∞ Î∞è ÌíàÏßà Î≥¥Ïû•")
        print("\nÏù¥Ï†ú 'Î¨¥ÏóáÏùÑ ÌïòÏãúÍ≤†ÏäµÎãàÍπå?'ÏóêÏÑú ÏÉÅÌô©Ïóê ÎßûÎäî Îã§ÏñëÌïú ÏÑ†ÌÉùÏßÄÍ∞Ä Ï†úÍ≥µÎê©ÎãàÎã§!")
        print("\nÏã§Ï†ú Í≤åÏûÑ Ïã§Ìñâ:")
        print("  source venv/bin/activate && python main.py --skip-checks")
    else:
        print("\n‚ùå ÎèôÏ†Å ÏÑ†ÌÉùÏßÄ ÏÉùÏÑ± ÌÖåÏä§Ìä∏ Ïã§Ìå®.")
        print("Ï∂îÍ∞Ä ÌôïÏù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.")
    
    return success

if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1)